{"version":3,"sources":["../../src/bin/www.js"],"names":["debug","port","normalizePort","process","env","PORT","app","set","server","http","createServer","io","use","session","listen","_","console","log","on","onError","onListening","val","parseInt","isNaN","error","syscall","bind","code","exit","addr","address"],"mappings":";;AAMA;;AACA;;;;AAEA;;;;AAEA;;;;AACA;;AAEA;;;;;;AAZA;;;;AAMA,IAAIA,QAAQ,qBAAM,mBAAN,CAAZ;;AAOA;;;AAGA;;;;AAIA,IAAIC,OAAOC,cAAcC,QAAQC,GAAR,CAAYC,IAAZ,IAAoB,MAAlC,CAAX;AACAC,SAAIC,GAAJ,CAAQ,MAAR,EAAgBN,IAAhB;;AAEA;;;;AAIA,IAAIO,SAASC,eAAKC,YAAL,CAAkBJ,QAAlB,CAAb;;AAEA,IAAIK,KAAK,sBAAaH,MAAb,EACRI,GADQ,CACJ,6BAAcC,YAAd,CADI,CAAT;;AAGA,4BAAcF,EAAd;AACA;;;;AAIAH,OAAOM,MAAP,CAAcb,IAAd,EAAmBc,KAAG;AACpBC,UAAQC,GAAR,CAAa,uBAAsBhB,IAAK,EAAxC;AACD,CAFD;AAGAO,OAAOU,EAAP,CAAU,OAAV,EAAmBC,OAAnB;AACAX,OAAOU,EAAP,CAAU,WAAV,EAAuBE,WAAvB;;AAEA;;;;AAIA,SAASlB,aAAT,CAAuBmB,GAAvB,EAA4B;AAC1B,MAAIpB,OAAOqB,SAASD,GAAT,EAAc,EAAd,CAAX;;AAEA,MAAIE,MAAMtB,IAAN,CAAJ,EAAiB;AACf;AACA,WAAOoB,GAAP;AACD;;AAED,MAAIpB,QAAQ,CAAZ,EAAe;AACb;AACA,WAAOA,IAAP;AACD;;AAED,SAAO,KAAP;AACD;;AAED;;;;AAIA,SAASkB,OAAT,CAAiBK,KAAjB,EAAwB;AACtB,MAAIA,MAAMC,OAAN,KAAkB,QAAtB,EAAgC;AAC9B,UAAMD,KAAN;AACD;;AAED,MAAIE,OAAO,OAAOzB,IAAP,KAAgB,QAAhB,GACP,UAAUA,IADH,GAEP,UAAUA,IAFd;;AAIA;AACA,UAAQuB,MAAMG,IAAd;AACE,SAAK,QAAL;AACEX,cAAQQ,KAAR,CAAcE,OAAO,+BAArB;AACAvB,cAAQyB,IAAR,CAAa,CAAb;AACA;AACF,SAAK,YAAL;AACEZ,cAAQQ,KAAR,CAAcE,OAAO,oBAArB;AACAvB,cAAQyB,IAAR,CAAa,CAAb;AACA;AACF;AACE,YAAMJ,KAAN;AAVJ;AAYD;;AAED;;;;AAIA,SAASJ,WAAT,GAAuB;AACrB,MAAIS,OAAOrB,OAAOsB,OAAP,EAAX;AACA,MAAIJ,OAAO,OAAOG,IAAP,KAAgB,QAAhB,GACP,UAAUA,IADH,GAEP,UAAUA,KAAK5B,IAFnB;AAGAD,QAAM,kBAAkB0B,IAAxB;AACD","file":"www.js","sourcesContent":["\n\n/**\n * Module dependencies.\n */\n\nimport {app,session} from '../app';\nimport Debug from 'debug';\nvar debug = Debug('new-folder:server');\nimport http from 'http';\n\nimport socketServer from \"socket.io\";\nimport {attachSockets} from '../sockets';\n\nimport sharedsession from \"express-socket.io-session\";\n// Handler socker server\n\n\n/**\n * Get port from environment and store in Express.\n */\n\nvar port = normalizePort(process.env.PORT || '5000');\napp.set('port', port);\n\n/**\n * Create HTTP server.\n */\n\nvar server = http.createServer(app);\n\nvar io = socketServer(server)\n.use(sharedsession(session));\n\nattachSockets(io);\n/**\n * Listen on provided port, on all network interfaces.\n */\n\nserver.listen(port,_=>{\n  console.log(`app listen in port: ${port}`);\n});\nserver.on('error', onError);\nserver.on('listening', onListening);\n\n/**\n * Normalize a port into a number, string, or false.\n */\n\nfunction normalizePort(val) {\n  var port = parseInt(val, 10);\n\n  if (isNaN(port)) {\n    // named pipe\n    return val;\n  }\n\n  if (port >= 0) {\n    // port number\n    return port;\n  }\n\n  return false;\n}\n\n/**\n * Event listener for HTTP server \"error\" event.\n */\n\nfunction onError(error) {\n  if (error.syscall !== 'listen') {\n    throw error;\n  }\n\n  var bind = typeof port === 'string'\n    ? 'Pipe ' + port\n    : 'Port ' + port;\n\n  // handle specific listen errors with friendly messages\n  switch (error.code) {\n    case 'EACCES':\n      console.error(bind + ' requires elevated privileges');\n      process.exit(1);\n      break;\n    case 'EADDRINUSE':\n      console.error(bind + ' is already in use');\n      process.exit(1);\n      break;\n    default:\n      throw error;\n  }\n}\n\n/**\n * Event listener for HTTP server \"listening\" event.\n */\n\nfunction onListening() {\n  var addr = server.address();\n  var bind = typeof addr === 'string'\n    ? 'pipe ' + addr\n    : 'port ' + addr.port;\n  debug('Listening on ' + bind);\n}\n"]}