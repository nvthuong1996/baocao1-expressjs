{"version":3,"sources":["../../src/controller/conversionController.js"],"names":["Op","Sequelize","loadConversionType1","mssv","type","allConversion","model","user_conversion","findAll","where","user_id","result","item","obj","conversion_id","friend","findOne","ne","typeConersion","conversion","id","access","JSON","parse","name","friendInfo","qldt_account","ten_sv","user","nick_name","latestMessage","message","order","creator_id","is_reader","_tmp","message_body","content","concat","loadConversionType2"],"mappings":"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","file":"conversionController.js","sourcesContent":["import model from \"../model\";\r\nimport Sequelize from \"sequelize\";\r\nimport { isBuffer } from \"util\";\r\nconst Op = Sequelize.Op;\r\n\r\nasync function loadConversionType1(mssv){\r\n    let type = 1;\r\n\r\n    const allConversion = await model.user_conversion.findAll({\r\n        where:{\r\n            user_id:mssv\r\n        }\r\n    });\r\n\r\n    if(!allConversion) return null;\r\n\r\n    let result = [];\r\n\r\n    for(const item of allConversion){\r\n        let obj = {};\r\n        obj[\"you\"] = item.user_id;\r\n        obj[\"id\"] = item.conversion_id;\r\n\r\n        let friend = await model.user_conversion.findOne({\r\n            where:{\r\n                conversion_id:item.conversion_id,\r\n                user_id:{\r\n                    [Op.ne]: mssv\r\n                }\r\n            }\r\n        })\r\n        let typeConersion = await model.conversion.findOne({\r\n            where:{\r\n                id:item.conversion_id,\r\n            }\r\n        });\r\n\r\n        if(typeConersion.type!=type){\r\n            continue;\r\n        }\r\n\r\n\r\n        if(!friend){\r\n            // Nếu không có friend thì có thể là group chat\r\n            debugger;\r\n            continue;\r\n        }\r\n\r\n        obj[\"friend\"] = friend.user_id;\r\n\r\n        // Tim ten cua conversion\r\n\r\n        const access = JSON.parse(item.access);\r\n\r\n\r\n\r\n        obj[\"avatar\"] = \"\";\r\n\r\n        if(access.name){\r\n            const friendInfo = await model.qldt_account.findOne({\r\n                where:{\r\n                   id:obj[\"friend\"] \r\n                }\r\n            })\r\n\r\n            obj[\"name_conversion\"] = friendInfo.ten_sv;\r\n\r\n        }else{\r\n            const friendInfo = await model.user.findOne({\r\n                where:{\r\n                    mssv:obj[\"friend\"]\r\n                }\r\n            })\r\n\r\n            obj[\"name_conversion\"] = friendInfo.nick_name;\r\n        }\r\n\r\n\r\n\r\n        const latestMessage = await model.message.findOne({\r\n            where:{\r\n                conversion_id:item.conversion_id,\r\n            },\r\n            order: [['updatedAt', 'DESC']]\r\n        })\r\n\r\n        if(latestMessage){\r\n            if(latestMessage.creator_id==obj[\"friend\"]){\r\n                obj[\"is_reader\"] = latestMessage.is_reader;\r\n            }else{\r\n                obj[\"is_reader\"]=true;\r\n            }\r\n            const _tmp = JSON.parse(latestMessage.message_body);\r\n\r\n            if(_tmp.type==\"text\"){\r\n                obj[\"latestMessage\"] = _tmp.content;\r\n            }else if(_tmp.type==\"stick\"){\r\n                obj[\"latestMessage\"] = \"đã gửi một nhãn dán.\";\r\n            }else if(_tmp.type==\"image\"){\r\n                obj[\"latestMessage\"] = \"đã gửi một ảnh.\";\r\n            }   \r\n\r\n            \r\n\r\n        }else{\r\n            obj[\"is_reader\"] =true;\r\n            obj[\"latestMessage\"] = \"\";\r\n        }\r\n\r\n        \r\n        result = result.concat(obj);\r\n\r\n\r\n    }\r\n\r\n\r\n\r\n    return result;\r\n\r\n}\r\n\r\n\r\n\r\nasync function loadConversionType2(mssv){\r\n    let type = 2;\r\n\r\n    const allConversion = await model.user_conversion.findAll({\r\n        where:{\r\n            user_id:mssv\r\n        }\r\n    });\r\n\r\n    if(!allConversion) return null;\r\n\r\n    let result = [];\r\n\r\n    for(const item of allConversion){\r\n        let obj = {};\r\n        obj[\"you\"] = item.user_id;\r\n        obj[\"id\"] = item.conversion_id;\r\n\r\n\r\n        let typeConersion = await model.conversion.findOne({\r\n            where:{\r\n                id:item.conversion_id,\r\n            }\r\n        });\r\n\r\n        if(typeConersion.type!=type){\r\n            continue;\r\n        }\r\n\r\n        obj[\"avatar\"] = \"\";\r\n        obj[\"name_conversion\"] = typeConersion.name;\r\n\r\n        const latestMessage = await model.message.findOne({\r\n            where:{\r\n                conversion_id:item.conversion_id,\r\n            },\r\n            order: [['updatedAt', 'DESC']]\r\n        })\r\n\r\n\r\n        if(latestMessage){\r\n            if(latestMessage.creator_id==obj[\"friend\"]){\r\n                obj[\"is_reader\"] = latestMessage.is_reader;\r\n            }else{\r\n                obj[\"is_reader\"]=true;\r\n            }\r\n            const _tmp = JSON.parse(latestMessage.message_body);\r\n\r\n            if(_tmp.type==\"text\"){\r\n                obj[\"latestMessage\"] = _tmp.content;\r\n            }else if(_tmp.type==\"stick\"){\r\n                obj[\"latestMessage\"] = \"đã gửi một nhãn dán.\";\r\n            }else if(_tmp.type==\"image\"){\r\n                obj[\"latestMessage\"] = \"đã gửi một ảnh.\";\r\n            }\r\n        }else{\r\n            obj[\"is_reader\"] =true;\r\n            obj[\"latestMessage\"] = \"\";\r\n        }\r\n\r\n        \r\n        result = result.concat(obj);\r\n\r\n\r\n    }\r\n\r\n\r\n\r\n    return result;\r\n\r\n}\r\n\r\nexport default {loadConversionType1,loadConversionType2};"]}