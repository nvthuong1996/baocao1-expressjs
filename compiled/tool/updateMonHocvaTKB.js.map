{"version":3,"sources":["../../src/tool/updateMonHocvaTKB.js"],"names":["updateCSDL","model","dkmh","sync","force","monhoc","Object","keys","allMh","sinhvien","i","j","data","slice","length","obj","mdk","msmh","tenmonhoc","nhommonhoc","parseInt","nhomthuchanh","JSON","stringify","create","tkb","mssv","createConversionFromMonHoc","allNMH","findAll","item","conversion","name","is_active","type","createConversion","update","conversion_id","id"],"mappings":";;;;;;;AAAA;;;;AACA;;;;AAEA;;;;AACA;;;;;;AAEA,eAAeA,UAAf,GAA6B;;AAEzB,UAAMC,gBAAMC,IAAN,CAAWC,IAAX,CAAgB,EAACC,OAAO,IAAR,EAAhB,CAAN;;AAEA,UAAMH,gBAAMI,MAAN,CAAaF,IAAb,CAAkB,EAACC,OAAO,IAAR,EAAlB,CAAN;;AAEA,QAAIC,SAASC,OAAOC,IAAP,CAAYC,eAAZ,CAAb;AACA,QAAIC,WAAWH,OAAOC,IAAP,CAAYL,cAAZ,CAAf;;AAGA,SAAI,IAAIQ,CAAR,IAAaL,MAAb,EAAoB;;AAEhB,aAAI,IAAIM,CAAR,IAAaH,gBAAME,CAAN,CAAb,EAAsB;AAClB,gBAAIE,OAAOD,EAAEE,KAAF,CAAQ,CAAR,EAAUF,EAAEG,MAAF,GAAS,CAAnB,CAAX;AACA,gBAAIC,GAAJ;AACA,gBAAGJ,EAAE,CAAF,CAAH,EAAQ;AACJI,sBAAM;AACFC,yBAAKL,EAAE,CAAF,CADH;AAEFM,0BAAMN,EAAE,CAAF,CAFJ;AAGFO,+BAAWP,EAAE,CAAF,CAHT;AAIFQ,gCAAYC,SAAST,EAAE,CAAF,CAAT,CAJV;AAKFU,kCAAcD,SAAST,EAAE,CAAF,CAAT,CALZ;AAMFC,0BAAKU,KAAKC,SAAL,CAAeX,IAAf;AANH,iBAAN;AAQH,aATD,MASK;AACDG,sBAAM;AACFC,yBAAKL,EAAE,CAAF,CADH;AAEFM,0BAAMN,EAAE,CAAF,CAFJ;AAGFO,+BAAWP,EAAE,CAAF,CAHT;AAIFQ,gCAAYC,SAAST,EAAE,CAAF,CAAT,CAJV;AAKFC,0BAAKU,KAAKC,SAAL,CAAeX,IAAf;AALH,iBAAN;AAOH;;AAED,kBAAMX,gBAAMI,MAAN,CAAamB,MAAb,CAAoBT,GAApB,CAAN;AAEH;AACJ;;AAED,SAAI,IAAIL,CAAR,IAAaD,QAAb,EAAsB;AAClB,YAAIgB,MAAMvB,eAAKQ,CAAL,EAAQe,GAAlB;AACA,aAAI,IAAIpB,MAAR,IAAkBC,OAAOC,IAAP,CAAYkB,GAAZ,CAAlB,EAAmC;AAC/B,gBAAIV,MAAK;AACLW,sBAAKhB,CADA;AAELM,qBAAIS,IAAIpB,MAAJ;AAFC,aAAT;AAIA,kBAAMJ,gBAAMC,IAAN,CAAWsB,MAAX,CAAkBT,GAAlB,CAAN;AAEH;AACJ;AACJ;;AAED,eAAeY,0BAAf,GAA2C;AACvC,QAAIC,SAAS,MAAM3B,gBAAMI,MAAN,CAAawB,OAAb,EAAnB;AACA,SAAI,IAAIC,IAAR,IAAgBF,MAAhB,EAAuB;AACnB,YAAIV,YAAYY,KAAKZ,SAAL,GAAgB,IAAhB,GAAsBY,KAAKX,UAA3C;AACA,YAAGW,KAAKT,YAAR,EAAqB;AACjBH,yBAAa,OAAKY,KAAKT,YAAV,GAAuB,GAApC;AACH,SAFD,MAEK;AACDH,yBAAa,GAAb;AACH;;AAED,YAAIa,aAAa;AACbC,kBAAKd,SADQ;AAEbe,uBAAU,CAFG;AAGbC,kBAAK;AAHQ,SAAjB;;AAMA,YAAIC,mBAAmB,MAAMlC,gBAAM8B,UAAN,CAAiBP,MAAjB,CAAwBO,UAAxB,CAA7B;;AAEA,cAAMD,KAAKM,MAAL,CAAY;AACdC,2BAAcF,iBAAiBG;AADjB,SAAZ,CAAN;AAKH;AAGJ;;QAEOtC,U,GAAAA,U;QAAW2B,0B,GAAAA,0B","file":"updateMonHocvaTKB.js","sourcesContent":["import model from \"../model\";\r\nimport fs from \"fs\";\r\n\r\nimport allMh from \"../../qldtData/allMh.json\";\r\nimport dkmh from \"../../qldtData/dkmh.json\";\r\n\r\nasync function updateCSDL () {\r\n\r\n    await model.dkmh.sync({force: true});\r\n    \r\n    await model.monhoc.sync({force: true});\r\n    \r\n    let monhoc = Object.keys(allMh);\r\n    let sinhvien = Object.keys(dkmh);\r\n    \r\n    \r\n    for(let i of monhoc){\r\n    \r\n        for(let j of allMh[i]){\r\n            let data = j.slice(0,j.length-1);\r\n            let obj;\r\n            if(j[4]){\r\n                obj = {\r\n                    mdk: j[0],\r\n                    msmh: j[1],\r\n                    tenmonhoc: j[2],\r\n                    nhommonhoc: parseInt(j[3]),\r\n                    nhomthuchanh: parseInt(j[4]),\r\n                    data:JSON.stringify(data)\r\n                }\r\n            }else{\r\n                obj = {\r\n                    mdk: j[0],\r\n                    msmh: j[1],\r\n                    tenmonhoc: j[2],\r\n                    nhommonhoc: parseInt(j[3]),\r\n                    data:JSON.stringify(data)\r\n                }\r\n            }\r\n\r\n            await model.monhoc.create(obj)\r\n            \r\n        }\r\n    }\r\n\r\n    for(let i of sinhvien){\r\n        let tkb = dkmh[i].tkb;\r\n        for(let monhoc of Object.keys(tkb)){\r\n            let obj ={\r\n                mssv:i,\r\n                mdk:tkb[monhoc]\r\n            }\r\n            await model.dkmh.create(obj)\r\n            \r\n        }\r\n    }\r\n}\r\n\r\nasync function createConversionFromMonHoc(){\r\n    let allNMH = await model.monhoc.findAll();\r\n    for(let item of allNMH){\r\n        let tenmonhoc = item.tenmonhoc+ \"(N\" +item.nhommonhoc;\r\n        if(item.nhomthuchanh){\r\n            tenmonhoc += \":T\"+item.nhomthuchanh+\")\";\r\n        }else{\r\n            tenmonhoc += \")\";\r\n        }\r\n\r\n        let conversion = {\r\n            name:tenmonhoc,\r\n            is_active:1,\r\n            type:2\r\n        }\r\n\r\n        let createConversion = await model.conversion.create(conversion);\r\n\r\n        await item.update({\r\n            conversion_id:createConversion.id\r\n        });\r\n\r\n\r\n    }\r\n\r\n\r\n}\r\n\r\nexport {updateCSDL,createConversionFromMonHoc};"]}