{"version":3,"sources":["../../src/messenger-api-helpers/api.js"],"names":["PAGE_ACCESS_TOKEN","messengerconfig","callAPI","endPoint","messageDataArray","queryParams","retries","console","error","query","Object","assign","access_token","messageToSend","queue","uri","qs","method","json","response","body","statusCode","log","JSON","stringify","statusMessage","callMessagesAPI","callThreadAPI"],"mappings":";;;;;;AAQA;;;;AACA;;;;AAGA;;;;AACA;;;;AAFA;AAXA;;;;;;;AAOA;AAQA,MAAMA,oBAAoBC,wBAAgBD,iBAA1C;;AAEA;;;;;;;;;AASA,MAAME,UAAU,CAACC,QAAD,EAAWC,gBAAX,EAA6BC,cAAc,EAA3C,EAA+CC,UAAU,CAAzD,KAA+D;AAC7E;AACA,MAAI,CAACH,QAAL,EAAe;AACbI,YAAQC,KAAR,CAAc,2CAAd;AACA;AACD;;AAED;AACA,MAAIF,UAAU,CAAd,EAAiB;AACfC,YAAQC,KAAR,CACE,uBADF,EAEE,EAACL,QAAD,EAAWC,gBAAX,EAA6BC,WAA7B,EAFF;;AAKA;AACD;;AAED;AACA;AACA,QAAMI,QAAQC,OAAOC,MAAP,CAAc,EAACC,cAAcZ,iBAAf,EAAd,EAAiDK,WAAjD,CAAd;AACA;;AAEA;AACA,QAAM,CAACQ,aAAD,EAAgB,GAAGC,KAAnB,IAA4B,yBAAUV,gBAAV,CAAlC;AACA,yBAAQ;AACNW,SAAM,sCAAqCZ,QAAS,EAD9C;AAENa,QAAIP,KAFE;AAGNQ,YAAQ,MAHF;AAINC,UAAML;;AAJA,GAAR,EAMG,CAACL,KAAD,EAAQW,QAAR,EAAkBC,IAAlB,KAA2B;AAC5B,QAAI,CAACZ,KAAD,IAAUW,SAASE,UAAT,KAAwB,GAAtC,EAA2C;AACzC;AACAd,cAAQe,GAAR,CACG,gCAA+BnB,QAAS,aAD3C,EAEEoB,KAAKC,SAAL,CAAeJ,IAAf,CAFF;;AAKA;AACA,UAAI,CAAC,uBAAQN,KAAR,CAAL,EAAqB;AACnBZ,gBAAQC,QAAR,EAAkBW,KAAlB,EAAyBT,WAAzB;AACD;AACF,KAXD,MAWO;AACL;AACAE,cAAQC,KAAR,CACG,yCAAwCL,QAAS,EADpD,EAEEgB,SAASE,UAFX,EAGEF,SAASM,aAHX,EAIEL,KAAKZ,KAJP,EAKEH,WALF;;AAQA;AACAE,cAAQC,KAAR,CAAe,qBAAoBF,OAAQ,OAA3C;AACAJ,cAAQC,QAAR,EAAkBC,gBAAlB,EAAoCC,WAApC,EAAiDC,UAAU,CAA3D;AACD;AACF,GAhCD;AAiCD,CAzDD;;AA2DA,MAAMoB,kBAAkB,CAACtB,gBAAD,EAAmBC,cAAc,EAAjC,KAAwC;AAC9D,SAAOH,QAAQ,UAAR,EAAoBE,gBAApB,EAAsCC,WAAtC,CAAP;AACD,CAFD;;AAIA,MAAMsB,gBAAgB,CAACvB,gBAAD,EAAmBC,cAAc,EAAjC,KAAwC;AAC5D,SAAOH,QAAQ,iBAAR,EAA2BE,gBAA3B,EAA6CC,WAA7C,CAAP;AACD,CAFD;;kBAIe;AACbqB,iBADa;AAEbC;AAFa,C","file":"api.js","sourcesContent":["/**\r\n * Copyright 2017-present, Facebook, Inc. All rights reserved.\r\n *\r\n * This source code is licensed under the license found in the\r\n * LICENSE file in the root directory of this source tree.\r\n */\r\n\r\n// ===== LODASH ================================================================\r\nimport castArray from 'lodash/castArray';\r\nimport isEmpty from 'lodash/isEmpty';\r\n\r\n// ===== MODULES ===============================================================\r\nimport request from 'request';\r\nimport {messengerconfig} from '../../config.json';\r\n\r\nconst PAGE_ACCESS_TOKEN = messengerconfig.PAGE_ACCESS_TOKEN;\r\n\r\n/**\r\n * Send messages in order to the Facebook graph API.\r\n *\r\n * @param   {String}          endPoint - Specific endpoint to send data to\r\n * @param   {Object|Object[]} messageDataArray - Payloads to send individually\r\n * @param   {Object}          queryParams - Query Parameters\r\n * @param   {Object}          retries - # of times to attempt to send a message.\r\n * @returns {undefined}\r\n */\r\nconst callAPI = (endPoint, messageDataArray, queryParams = {}, retries = 1) => {\r\n  // Error if developer forgot to specify an endpoint to send our request to\r\n  if (!endPoint) {\r\n    console.error('callAPI requires you specify an endpoint.');\r\n    return;\r\n  }\r\n\r\n  // Error if we've run out of retries.\r\n  if (retries < 0) {\r\n    console.error(\r\n      'No more retries left.',\r\n      {endPoint, messageDataArray, queryParams}\r\n    );\r\n\r\n    return;\r\n  }\r\n\r\n  // ensure query parameters have a PAGE_ACCESS_TOKEN value\r\n  /* eslint-disable camelcase */\r\n  const query = Object.assign({access_token: PAGE_ACCESS_TOKEN}, queryParams);\r\n  /* eslint-enable camelcase */\r\n\r\n  // ready the first message in the array for send.\r\n  const [messageToSend, ...queue] = castArray(messageDataArray);\r\n  request({\r\n    uri: `https://graph.facebook.com/v2.6/me/${endPoint}`,\r\n    qs: query,\r\n    method: 'POST',\r\n    json: messageToSend,\r\n\r\n  }, (error, response, body) => {\r\n    if (!error && response.statusCode === 200) {\r\n      // Message has been successfully received by Facebook.\r\n      console.log(\r\n        `Successfully sent message to ${endPoint} endpoint: `,\r\n        JSON.stringify(body)\r\n      );\r\n\r\n      // Continue sending payloads until queue empty.\r\n      if (!isEmpty(queue)) {\r\n        callAPI(endPoint, queue, queryParams);\r\n      }\r\n    } else {\r\n      // Message has not been successfully received by Facebook.\r\n      console.error(\r\n        `Failed calling Messenger API endpoint ${endPoint}`,\r\n        response.statusCode,\r\n        response.statusMessage,\r\n        body.error,\r\n        queryParams\r\n      );\r\n\r\n      // Retry the request\r\n      console.error(`Retrying Request: ${retries} left`);\r\n      callAPI(endPoint, messageDataArray, queryParams, retries - 1);\r\n    }\r\n  });\r\n};\r\n\r\nconst callMessagesAPI = (messageDataArray, queryParams = {}) => {\r\n  return callAPI('messages', messageDataArray, queryParams);\r\n};\r\n\r\nconst callThreadAPI = (messageDataArray, queryParams = {}) => {\r\n  return callAPI('thread_settings', messageDataArray, queryParams);\r\n};\r\n\r\nexport default {\r\n  callMessagesAPI,\r\n  callThreadAPI,\r\n};\r\n"]}