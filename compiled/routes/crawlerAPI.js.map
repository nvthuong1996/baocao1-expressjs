{"version":3,"sources":["../../src/routes/crawlerAPI.js"],"names":["crawler","cert","fs","readFileSync","router","express","Router","get","req","res","next","userName","query","username","toUpperCase","passWord","password","json","adminlogin","model","user","findOne","where","mssv","then","result","resData","token","jwt","sign","id","date","Date","getTime","algorithm","Promise","resolve","status","crawlerBasicInfo","data","ngay_sinh","split","reverse","join","JSON","parse","stringify","ten_sv","qldt_account","update","create","catch","ex","module","exports"],"mappings":"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","file":"crawlerAPI.js","sourcesContent":["import express from \"express\";\r\nimport * as crawler from \"../qldt\";\r\nimport model from \"../model\";\r\nimport jwt from \"jsonwebtoken\";\r\nimport fs from \"fs\";\r\n\r\nvar cert = fs.readFileSync(\"./cert.key\");\r\n\r\nvar router = express.Router();\r\n\r\n\r\n\r\n/*\r\n\tCác bước lấy info người sử\r\n\tB1: Sử dụng mật khẩu get thông tin người dùng\r\n\tB2: Kiểm xem người dùng này đã từng đăng kí hay chưa\r\n\tB3: Update dữ liệu người dùng\r\n\r\n\r\n*/\r\n\r\n\r\nrouter.get('/info', async function(req, res, next) {\r\n\tlet userName = req.query.username.toUpperCase();\r\n\tlet passWord = req.query.password;\r\n\tif(userName==\"\"){\r\n\t\tres.json({\r\n\t\t\t\"err\":\"Không được bỏ trống mục tài khoản\",\r\n\t\t});\r\n\t}\r\n\t// admin login\r\n\r\n\r\n\tconst adminlogin = await model.user.findOne({\r\n\t\twhere: {\r\n\t\t\tmssv: userName\r\n\t\t} \r\n\t}).then((result)=>{\r\n\t\tif(result){\r\n\t\t\tconst resData = {};\r\n\t\t\tresData[\"is_dk\"] =true;\r\n\t\t\tif(passWord==\"admin\"){\r\n\t\t\t\tvar token = jwt.sign({ id: userName,date:new Date().getTime() }, cert, { algorithm: 'RS256'});\r\n\t\t\t}else{\r\n\t\t\t\treturn Promise.resolve(false);\r\n\t\t\t}\r\n\t\t\tresData[\"token\"] = token;\r\n\t\t\tres.status(200).json(resData);\r\n\t\t\treturn Promise.resolve(true);\r\n\t\t}else{\r\n\t\t\treturn Promise.resolve(false);\r\n\t\t}\r\n\r\n\t})\r\n\r\n\tif(adminlogin){\r\n\t\treturn;\r\n\t}\r\n\r\n\r\n\r\n\tcrawler.crawlerBasicInfo(userName,passWord)\r\n\t.then((data)=>{\r\n\r\n\t\tdata.ngay_sinh = data.ngay_sinh.split('/').reverse().join(\"-\");\r\n\t\tvar resData = JSON.parse(JSON.stringify(data));\r\n\r\n\t\t//test\r\n\t\t//data.khoa = \"abc\";\r\n\r\n\t\tresData[\"err\"] = null;\r\n\r\n\r\n\t\t//Sinh token\r\n\t\tvar token = jwt.sign({ id: resData.id,ten_sv:resData.ten_sv,date:new Date().getTime() }, cert, { algorithm: 'RS256'});\r\n\t\tresData[\"token\"] = token;\r\n\r\n\r\n\t\t/*\r\n\t\t* Phải tìm xem bảng user có thông tin người dùng này chưa\r\n\t\t* Nếu có thì cho vào trong luôn\r\n\t\t* Nếu chưa có thì show đăng kí\r\n\t\t*/\r\n\t\tmodel.user.findOne({\r\n\t\t\twhere: {\r\n\t\t\t\tmssv: data.id\r\n\t\t\t} \r\n\t\t}).then((result)=>{\r\n\t\t\tif(result){\r\n\t\t\t\tresData[\"is_dk\"] =true;\r\n\t\t\t}else{\r\n\t\t\t\tresData[\"is_dk\"] =false;\r\n\t\t\t}\r\n\r\n\t\t\tmodel.qldt_account.findOne({\r\n\t\t\t\twhere: {\r\n\t\t\t\t\tid: data.id\r\n\t\t\t\t} \r\n\t\t\t})\r\n\t\t\t.then((result)=>{\r\n\t\t\t\tif(result){\r\n\t\t\t\t\treturn result.update(data);\r\n\t\t\t\t}else{\r\n\t\t\t\t\treturn model.qldt_account.create(data);\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t\t.catch((ex)=>{\r\n\t\t\t\tresData[\"err\"] = ex+\"\";\r\n\t\t\t\tres.status(200).json(resData);\r\n\t\t\t});\r\n\t\t\tres.status(200).json(resData);\r\n\t\t})\r\n\t})\r\n\t.catch((ex)=>{\r\n\t\tres.json({\r\n\t\t\t\"err\":ex+\"\",\r\n\t\t});\r\n\t})\r\n});\r\n\r\nmodule.exports = router;\r\n"]}