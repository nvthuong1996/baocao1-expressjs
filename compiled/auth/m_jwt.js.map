{"version":3,"sources":["../../src/auth/m_jwt.js"],"names":["cert_public","fs","readFileSync","cert_private","decode","encode","token","Promise","resolve","reject","jwt","verify","err","decoded","obj","sign","algorithm"],"mappings":";;;;;;;AAAA;;;;AACA;;;;;;AAEA,IAAIA,cAAcC,aAAGC,YAAH,CAAgB,YAAhB,CAAlB;AACA,IAAIC,eAAeF,aAAGC,YAAH,CAAgB,YAAhB,CAAnB;;QAGIE,M,GAAAA,M;QACAC,M,GAAAA,M;;;AAGJ,SAASD,MAAT,CAAgBE,KAAhB,EAAsB;AAClB,WAAO,IAAIC,OAAJ,CAAY,CAACC,OAAD,EAASC,MAAT,KAAkB;AACjCC,+BAAIC,MAAJ,CAAWL,KAAX,EAAkBN,WAAlB,EAA+B,UAASY,GAAT,EAAcC,OAAd,EAAuB;AAClD,gBAAGD,GAAH,EAAO;AACHH,uBAAOG,GAAP;AACH,aAFD,MAEK;AACDJ,wBAAQK,OAAR;AACH;AACJ,SAND;AAOH,KARM,CAAP;AASH;;AAED,SAASR,MAAT,CAAgBS,GAAhB,EAAoB;AAChB,QAAIR,QAAQI,uBAAIK,IAAJ,CAASD,GAAT,EAAcX,YAAd,EAA4B,EAAEa,WAAW,OAAb,EAA5B,CAAZ;AACA,WAAOV,KAAP;AACH","file":"m_jwt.js","sourcesContent":["import jwt from \"jsonwebtoken\";\r\nimport fs from \"fs\";\r\n\r\nvar cert_public = fs.readFileSync(\"./cert.pub\");\r\nvar cert_private = fs.readFileSync(\"./cert.key\");\r\n\r\nexport {\r\n    decode,\r\n    encode\r\n}\r\n\r\nfunction decode(token){\r\n    return new Promise((resolve,reject)=>{\r\n        jwt.verify(token, cert_public, function(err, decoded) {\r\n            if(err){\r\n                reject(err);\r\n            }else{\r\n                resolve(decoded);\r\n            }\r\n        });\r\n    })\r\n}\r\n\r\nfunction encode(obj){\r\n    var token = jwt.sign(obj, cert_private, { algorithm: 'RS256'});\r\n    return token;\r\n}"]}